{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM13jKMurVueR4IZqIhJRAy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KeoratileShongoane/AML/blob/main/PubChem\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***\n",
        "# **Applications of Machine Learning in Chemistry**: Assignment 3\n",
        "#### __Name:__ Keoratile Shongoane\n",
        "#### __Student number:__ 1389986\n",
        "\n",
        "***"
      ],
      "metadata": {
        "id": "tm14twbAHZzv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Table of Contents\n",
        "\n",
        "- [Imports](#imports)\n",
        "- [1. Dataset Description](#1-dataset-description)\n",
        "- [2. Molecular Information](#2-molecular-information)\n",
        "  - [2.1 Propane](#21-propane)\n",
        "  - [2.2 Ethene](#22-ethene)\n",
        "  - [2.3 Cyclohexane](#23-cyclohexane)\n",
        "  - [2.4 Buckminsterfullerene](#24-buckminsterfullerene)\n",
        "- [3. Drawing Molecules](#3-drawing-molecules)\n",
        "  - [3.1 Visualizing First Six Molecules](#31-visualizing-first-six-molecules)\n",
        "- [4. Challenges and Improvements](#4-challenges-and-improvements)\n",
        "- [5. Conclusion](#5-conclusion)\n"
      ],
      "metadata": {
        "id": "N4TMpt2r9QEM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this assignment, RDKit will be used to process molecules by visualizing and determining important properties of the molecules. The Delaney dataset was used, which contains chemical compounds and their solubility values, and the PubChem database will be used for additional molecular information."
      ],
      "metadata": {
        "id": "J9ZJtwFwVu86"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# __Imports__"
      ],
      "metadata": {
        "id": "ScJB4zKs_NS1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Install RDKit in Google Colab\n",
        "!pip install rdkit-pypi\n",
        " # Install Pubchem\n",
        "!pip install pubchempy\n",
        "\n",
        "# Imports\n",
        "from rdkit import Chem\n",
        "from rdkit.Chem import Draw\n",
        "from rdkit.Chem import Descriptors\n",
        "from IPython.display import display\n",
        "from rdkit.Chem.rdchem import BondType\n",
        "\n",
        "import pubchempy as pcp\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "TT3RkS-g8cD1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e2def105-7807-41f1-d61c-0501948b0829"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: rdkit-pypi in /usr/local/lib/python3.10/dist-packages (2022.9.5)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from rdkit-pypi) (1.26.4)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from rdkit-pypi) (9.4.0)\n",
            "Requirement already satisfied: pubchempy in /usr/local/lib/python3.10/dist-packages (1.0.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# __1. Dataset Description__"
      ],
      "metadata": {
        "id": "sOw27tmqUtp7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The Delaney dataset used in this assignment contains a collection of chemical compounds along with their experimentally determined solubility values. Each compound is represented by its chemical structure in the form of simplified molecular-input line-entry system (SMILES) notation."
      ],
      "metadata": {
        "id": "g4z9IT3zI-su"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# __2. Molecular Information__"
      ],
      "metadata": {
        "id": "_zNxtfRZJC9Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For this section, RDKit will be used for determining the molecules and to perform various tasks:\n",
        "*   `Number of atoms`\n",
        "\n",
        "*   `Chemical symbols`\n",
        "\n",
        "*   `Atomic weights`\n",
        "\n",
        "*   `The number of aromatic bonds`\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "CqvufVICJj3-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to analyze a molecule\n",
        "def analyze_molecule(name):\n",
        "    # Fetching the compound from PubChem by name\n",
        "    compound = pcp.get_compounds(name, 'name')[0]\n",
        "\n",
        "    # Retrieve the canonical SMILES string\n",
        "    smiles = compound.canonical_smiles\n",
        "    print(f'{name} - Canonical SMILES: {smiles}')\n",
        "\n",
        "    # Create RDKit molecule object\n",
        "    mol = Chem.MolFromSmiles(smiles)\n",
        "\n",
        "    # Find the number of atoms\n",
        "    num_atoms = mol.GetNumAtoms()\n",
        "\n",
        "    # Print chemical symbol and atomic weight of each atom\n",
        "    atom_info = []\n",
        "    for atom in mol.GetAtoms():\n",
        "        symbol = atom.GetSymbol()\n",
        "        atomic_weight = Descriptors.ExactMolWt(Chem.MolFromSmiles(symbol))\n",
        "        atom_info.append((symbol, atomic_weight))\n",
        "\n",
        "    # Find the number of aromatic bonds\n",
        "    num_aromatic_bonds = sum(1 for bond in mol.GetBonds() if bond.GetBondType() == BondType.AROMATIC)\n",
        "\n",
        "    return num_atoms, atom_info, num_aromatic_bonds"
      ],
      "metadata": {
        "id": "WUa4lFRoLIIZ"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### __2.1 Propane__"
      ],
      "metadata": {
        "id": "hx0LAdunMRiX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyzing Propane\n",
        "num_atoms, atom_info, num_aromatic_bonds = analyze_molecule('Propane')\n",
        "print(f\"Propane:\\n- Number of atoms: {num_atoms}\")\n",
        "print(f\"- Atom Info (Symbol, Atomic Weight): {atom_info}\")\n",
        "print(f\"- Number of Aromatic Bonds: {num_aromatic_bonds}\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dt6Cwno0MWhB",
        "outputId": "76429689-58b5-4f2d-c999-be1bfdc1b185"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Propane - Canonical SMILES: CCC\n",
            "Propane:\n",
            "- Number of atoms: 3\n",
            "- Atom Info (Symbol, Atomic Weight): [('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998)]\n",
            "- Number of Aromatic Bonds: 0\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### __2.2 Ethene__"
      ],
      "metadata": {
        "id": "WrSRgHpNJp_X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyzing Ethene\n",
        "num_atoms, atom_info, num_aromatic_bonds = analyze_molecule('Ethene')\n",
        "print(f\"Ethene:\\n- Number of atoms: {num_atoms}\")\n",
        "print(f\"- Atom Info (Symbol, Atomic Weight): {atom_info}\")\n",
        "print(f\"- Number of Aromatic Bonds: {num_aromatic_bonds}\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tEig-0_xL6_H",
        "outputId": "f10f6d2f-14e9-47cc-cf64-01562bec0e71"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ethene - Canonical SMILES: C=C\n",
            "Ethene:\n",
            "- Number of atoms: 2\n",
            "- Atom Info (Symbol, Atomic Weight): [('C', 16.031300127999998), ('C', 16.031300127999998)]\n",
            "- Number of Aromatic Bonds: 0\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### __2.3 Cyclohexane__"
      ],
      "metadata": {
        "id": "mkZsaqJjMDSi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyzing Cyclohexane\n",
        "num_atoms, atom_info, num_aromatic_bonds = analyze_molecule('Cyclohexane')\n",
        "print(f\"Cyclohexane:\\n- Number of atoms: {num_atoms}\")\n",
        "print(f\"- Atom Info (Symbol, Atomic Weight): {atom_info}\")\n",
        "print(f\"- Number of Aromatic Bonds: {num_aromatic_bonds}\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SrDXMDlPMrVK",
        "outputId": "744fbaa0-06b8-409f-f680-4348a4c98042"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cyclohexane - Canonical SMILES: C1CCCCC1\n",
            "Cyclohexane:\n",
            "- Number of atoms: 6\n",
            "- Atom Info (Symbol, Atomic Weight): [('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998)]\n",
            "- Number of Aromatic Bonds: 0\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### __2.4 Buckminsterfullerene__"
      ],
      "metadata": {
        "id": "21N2RUQbM1pH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyzing Buckminsterfullerene\n",
        "num_atoms, atom_info, num_aromatic_bonds = analyze_molecule('Buckminsterfullerene')\n",
        "print(f\"Buckminsterfullerene:\\n- Number of atoms: {num_atoms}\")\n",
        "print(f\"- Atom Info (Symbol, Atomic Weight): {atom_info}\")\n",
        "print(f\"- Number of Aromatic Bonds: {num_aromatic_bonds}\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GMRzQ0ZYNPIR",
        "outputId": "f38496ac-bad0-484f-e808-d43dc4c8a521"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Buckminsterfullerene - Canonical SMILES: C12=C3C4=C5C6=C1C7=C8C9=C1C%10=C%11C(=C29)C3=C2C3=C4C4=C5C5=C9C6=C7C6=C7C8=C1C1=C8C%10=C%10C%11=C2C2=C3C3=C4C4=C5C5=C%11C%12=C(C6=C95)C7=C1C1=C%12C5=C%11C4=C3C3=C5C(=C81)C%10=C23\n",
            "Buckminsterfullerene:\n",
            "- Number of atoms: 60\n",
            "- Atom Info (Symbol, Atomic Weight): [('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998), ('C', 16.031300127999998)]\n",
            "- Number of Aromatic Bonds: 90\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# __3. Drawing Molecules__"
      ],
      "metadata": {
        "id": "q2Aj9mBKNc28"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### __3.1 Visualizing the first six molecules__"
      ],
      "metadata": {
        "id": "PKeX7SYgOTnA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this section,  the first six molecules from the Delaney dataset will be drawn and displayed in a grid with their corresponding Compound IDs as labels."
      ],
      "metadata": {
        "id": "KyG7CUojN3XR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the Delaney dataset\n",
        "df = pd.read_csv('/content/solubility.csv')\n",
        "\n",
        "# Display the first few rows to verify the data\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "R_qfhoC6L-7N",
        "outputId": "b8865125-79b7-4da4-99e5-1518249962a6"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Compound ID  Minimum Degree  Molecular Weight  Number of H-Bond Donors  \\\n",
              "0   Amigdalin               1           457.432                        7   \n",
              "1    Fenfuram               1           201.225                        1   \n",
              "2      citral               1           152.237                        0   \n",
              "3      Picene               2           278.354                        0   \n",
              "4   Thiophene               2            84.143                        0   \n",
              "\n",
              "   Number of Rings  Number of Rotatable Bonds  Polar Surface Area  \\\n",
              "0                3                          7              202.32   \n",
              "1                2                          2               42.24   \n",
              "2                0                          4               17.07   \n",
              "3                5                          0                0.00   \n",
              "4                1                          0                0.00   \n",
              "\n",
              "   measured log solubility in mols per litre  \\\n",
              "0                                      -0.77   \n",
              "1                                      -3.30   \n",
              "2                                      -2.06   \n",
              "3                                      -7.87   \n",
              "4                                      -1.33   \n",
              "\n",
              "                                              smiles  \n",
              "0  OCC3OC(OCC2OC(OC(C#N)c1ccccc1)C(O)C(O)C2O)C(O)...  \n",
              "1                             Cc1occc1C(=O)Nc2ccccc2  \n",
              "2                               CC(C)=CCCC(C)=CC(=O)  \n",
              "3                 c1ccc2c(c1)ccc3c2ccc4c5ccccc5ccc43  \n",
              "4                                            c1ccsc1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d554342d-02c3-48d0-913b-79bd638721ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Compound ID</th>\n",
              "      <th>Minimum Degree</th>\n",
              "      <th>Molecular Weight</th>\n",
              "      <th>Number of H-Bond Donors</th>\n",
              "      <th>Number of Rings</th>\n",
              "      <th>Number of Rotatable Bonds</th>\n",
              "      <th>Polar Surface Area</th>\n",
              "      <th>measured log solubility in mols per litre</th>\n",
              "      <th>smiles</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Amigdalin</td>\n",
              "      <td>1</td>\n",
              "      <td>457.432</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>202.32</td>\n",
              "      <td>-0.77</td>\n",
              "      <td>OCC3OC(OCC2OC(OC(C#N)c1ccccc1)C(O)C(O)C2O)C(O)...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Fenfuram</td>\n",
              "      <td>1</td>\n",
              "      <td>201.225</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>42.24</td>\n",
              "      <td>-3.30</td>\n",
              "      <td>Cc1occc1C(=O)Nc2ccccc2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>citral</td>\n",
              "      <td>1</td>\n",
              "      <td>152.237</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>17.07</td>\n",
              "      <td>-2.06</td>\n",
              "      <td>CC(C)=CCCC(C)=CC(=O)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Picene</td>\n",
              "      <td>2</td>\n",
              "      <td>278.354</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-7.87</td>\n",
              "      <td>c1ccc2c(c1)ccc3c2ccc4c5ccccc5ccc43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Thiophene</td>\n",
              "      <td>2</td>\n",
              "      <td>84.143</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-1.33</td>\n",
              "      <td>c1ccsc1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d554342d-02c3-48d0-913b-79bd638721ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d554342d-02c3-48d0-913b-79bd638721ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d554342d-02c3-48d0-913b-79bd638721ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f91b740d-3649-417c-9838-f9b3c7c3d53e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f91b740d-3649-417c-9838-f9b3c7c3d53e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f91b740d-3649-417c-9838-f9b3c7c3d53e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1128,\n  \"fields\": [\n    {\n      \"column\": \"Compound ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1128,\n        \"samples\": [\n          \"cis-2-Pentene\",\n          \"5-(3-Methyl-2-butenyl)-5-ethylbarbital\",\n          \"Terbacil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Minimum Degree\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Molecular Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.7380772068097,\n        \"min\": 16.043,\n        \"max\": 780.949,\n        \"num_unique_values\": 741,\n        \"samples\": [\n          225.313,\n          313.747,\n          222.251\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of H-Bond Donors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Rings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Rotatable Bonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          7,\n          3,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Polar Surface Area\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.38359265570078,\n        \"min\": 0.0,\n        \"max\": 268.68,\n        \"num_unique_values\": 270,\n        \"samples\": [\n          53.94,\n          110.38,\n          74.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"measured log solubility in mols per litre\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.096441210089345,\n        \"min\": -11.6,\n        \"max\": 1.58,\n        \"num_unique_values\": 734,\n        \"samples\": [\n          -2.13,\n          -1.64,\n          -0.24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1128,\n        \"samples\": [\n          \"CC/C=C\\\\C\",\n          \"O=C1NC(=O)NC(=O)C1(CC)CC=C(C)C\",\n          \"Cc1[nH]c(=O)n(c(=O)c1Cl)C(C)(C)C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract the first six SMILES strings and compound IDs\n",
        "smiles_list = df['smiles'].head(6)\n",
        "compound_ids = df['Compound ID'].head(6)\n",
        "\n",
        "# Generate RDKit molecule objects\n",
        "molecules = [Chem.MolFromSmiles(smiles) for smiles in smiles_list]\n",
        "\n",
        "\n",
        "# Set the labels for the molecules using the compound IDs\n",
        "labels = [f'Compound ID: {cid}' for cid in compound_ids]\n",
        "\n",
        "# Draw the molecules in a grid (2x3 grid for 6 molecules)\n",
        "img = Draw.MolsToGridImage(molecules, molsPerRow=3, subImgSize=(200, 200), legends=labels)\n",
        "\n",
        "# Display the image\n",
        "display(img)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "QdXQiTCqPYN5",
        "outputId": "42cd447f-0969-4e54-a9a2-08ae64ad3211"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# __4. Challenges and Improvements__"
      ],
      "metadata": {
        "id": "y6Fcimr2WK3T"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "#### Challenges:\n",
        "- **Molecule Visualization**: Visualizing complex structures, like Buckminsterfullerene, was problematic, as the standard grid layout sometimes led to unclear or crowded visual representations.\n",
        "\n",
        "#### Improvements:\n",
        "- **Visualization Tools**: Exploring advanced RDKit features or alternative visualization libraries could enhance the clarity of complex molecules, while dynamically adjusting the grid layout based on molecule size could further improve visual quality."
      ],
      "metadata": {
        "id": "YLSuDdzxbzXc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# __5. Conclusion__"
      ],
      "metadata": {
        "id": "n5fxFVg6WY3w"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "This project used RDKit and PubChem to work with and analyze different molecules. It focused on visualizing the molecules and finding important details like the number of atoms, chemical symbols, atomic weights, and the number of aromatic bonds. It was able to drew and labeled the first six molecules from the Delaney dataset.\n",
        "\n",
        "This project showed the importance of data processing and visualization when working with molecules. These skills will be useful for future projects in molecular science, helping to explore more analyses and make more contributions to the field."
      ],
      "metadata": {
        "id": "NqP98ZpxcdyW"
      }
    }
  ]
}